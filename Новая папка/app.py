import streamlit as st
from utils.bank import (
    BANK_NAMES,
    get_random_questions_from_bank,
    get_random_questions_from_multiple,
)

st.set_page_config(page_title="–¢–µ—Å—Ç—ã", page_icon="üß™", layout="wide")

if "mode" not in st.session_state:
    st.session_state.mode = "home"
if "selected_bank" not in st.session_state:
    st.session_state.selected_bank = None
if "questions" not in st.session_state:
    st.session_state.questions = []
if "current_index" not in st.session_state:
    st.session_state.current_index = 0
if "answers" not in st.session_state:
    st.session_state.answers = {}


def start_test_for_bank(bank_name: str, combined: bool = False) -> None:
    st.session_state.mode = "test"
    st.session_state.selected_bank = bank_name
    if combined:
        st.session_state.questions = get_random_questions_from_multiple(BANK_NAMES)
    else:
        st.session_state.questions = get_random_questions_from_bank(bank_name)
    st.session_state.current_index = 0
    st.session_state.answers = {}


def go_home() -> None:
    st.session_state.mode = "home"
    st.session_state.selected_bank = None
    st.session_state.questions = []
    st.session_state.current_index = 0
    st.session_state.answers = {}


st.markdown(
    """
    <style>
    .square-btn > button { width: 100%; height: 110px; border-radius: 12px; font-size: 20px; font-weight: 600; }
    .bottom-btn > button { width: 100%; height: 64px; border-radius: 12px; font-size: 18px; font-weight: 600; }
    </style>
    """,
    unsafe_allow_html=True,
)


if st.session_state.mode == "home":
    st.title("–ì–ª–∞–≤–Ω–∞—è")
    st.caption("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç. –ù–∏–∂–Ω—è—è –∫–Ω–æ–ø–∫–∞ ‚Äî –æ–±—â–∏–π —Ç–µ—Å—Ç –∏–∑ –≤—Å–µ—Ö –±–∞–Ω–∫–æ–≤.")

    bank_labels = [f"–ë–∞–Ω–∫ {i}" for i in range(1, 9)]

    for row in range(2):
        cols = st.columns(4, gap="large")
        for col_idx in range(4):
            i = row * 4 + col_idx
            with cols[col_idx]:
                if st.button(
                    bank_labels[i],
                    key=f"bank_btn_{i}",
                    type="primary",
                    use_container_width=True,
                    help=f"–û—Ç–∫—Ä—ã—Ç—å {bank_labels[i]}",
                ):
                    start_test_for_bank(BANK_NAMES[i])

    st.divider()
    if st.button(
        "–û–±—â–∏–π —Ç–µ—Å—Ç (–≤—Å–µ –±–∞–Ω–∫–∏)",
        key="combined_btn",
        type="secondary",
        use_container_width=True,
        help="–°–ª—É—á–∞–π–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –∏–∑ –≤—Å–µ—Ö 8 –±–∞–Ω–∫–æ–≤",
    ):
        start_test_for_bank("combined", combined=True)

else:
    st.button("‚Üê –ù–∞ –≥–ª–∞–≤–Ω—É—é", on_click=go_home)

    questions = st.session_state.questions
    idx = st.session_state.current_index

    st.header("–¢–µ—Å—Ç")
    if not questions:
        st.info("–í –≤—ã–±—Ä–∞–Ω–Ω–æ–º –±–∞–Ω–∫–µ –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é –∏ –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ —Ä–∞–∑–¥–µ–ª–µ Admin.")
    else:
        total = len(questions)
        st.caption(f"–í–æ–ø—Ä–æ—Å {idx + 1} –∏–∑ {total}")
        q = questions[idx]
        st.write(q.get("text", ""))

        key = f"answer_{idx}"
        if q.get("type") == "mcq" and q.get("options"):
            option_labels = [f"{opt['key']}) {opt['text']}" for opt in q["options"]]
            current = st.session_state.answers.get(idx)
            choice = st.radio(
                "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç",
                options=option_labels,
                index=option_labels.index(current) if current in option_labels else None,
            )
            if choice:
                st.session_state.answers[idx] = choice
        else:
            st.text_input("–í–∞—à –æ—Ç–≤–µ—Ç (—Å–≤–æ–±–æ–¥–Ω–∞—è —Ñ–æ—Ä–º–∞)", key=key)

        col_prev, col_next = st.columns([1, 1])
        with col_prev:
            st.button(
                "–ù–∞–∑–∞–¥",
                disabled=idx == 0,
                on_click=lambda: st.session_state.__setitem__("current_index", max(0, idx - 1)),
            )
        with col_next:
            if idx < total - 1:
                st.button(
                    "–î–∞–ª–µ–µ",
                    on_click=lambda: st.session_state.__setitem__("current_index", min(total - 1, idx + 1)),
                )
            else:
                if st.button("–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç"):
                    go_home()
