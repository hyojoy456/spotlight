import streamlit as st
from utils.bank import BANK_NAMES, add_text_question, add_mcq_question, parse_pasted_mcq, load_bank

st.set_page_config(page_title="–ê–¥–º–∏–Ω", page_icon="üõ†", layout="wide")

st.title("–ê–¥–º–∏–Ω–∫–∞: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π")

bank_label_to_name = {f"–ë–∞–Ω–∫ {i+1}": name for i, name in enumerate(BANK_NAMES)}
label = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫", list(bank_label_to_name.keys()), index=0)
assert label is not None
bank_name = bank_label_to_name[label]

st.subheader("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –≤—Å—Ç–∞–≤–∫—É —Ç–µ–∫—Å—Ç–∞ (MCQ)")
st.caption("–í—Å—Ç–∞–≤—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç: 1. Question ... a) option1 b) option2 c) option3")

pasted = st.text_area("–í—Å—Ç–∞–≤—å—Ç–µ –∑–∞–¥–∞–Ω–∏–µ", height=140, key="pasted")
if st.button("–†–∞—Å–ø–∞—Ä—Å–∏—Ç—å"):
    q_text, opts = parse_pasted_mcq(pasted)
    if not q_text:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞")
    elif len(opts) < 2:
        st.error("–ù–∞–π–¥–µ–Ω–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤. –£–±–µ–¥–∏—Ç–µ—Å—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ a) b) c)")
    else:
        st.session_state.parsed_q = {"text": q_text, "options": opts}

if "parsed_q" in st.session_state:
    st.write("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:")
    st.write(st.session_state.parsed_q["text"])
    option_labels = [f"{o['key']}) {o['text']}" for o in st.session_state.parsed_q["options"]]
    correct_label = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç", option_labels, key="correct_choice")
    if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–Ω–∫"):
        if not correct_label:
            st.error("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç")
        else:
            correct_key = correct_label.split(")")[0].strip()
            add_mcq_question(
                bank_name,
                st.session_state.parsed_q["text"],
                st.session_state.parsed_q["options"],
                correct_key,
            )
            st.success("–í–æ–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω")
            del st.session_state.parsed_q

st.divider()

st.subheader("–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å (–±–µ–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)")
with st.form("add_text_form", clear_on_submit=True):
    text = st.text_area("–¢–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è", height=100)
    submitted = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–Ω–∫")
    if submitted:
        if not text.strip():
            st.error("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è")
        else:
            add_text_question(bank_name, text.strip())
            st.success("–ó–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ")

st.divider()

st.subheader("–¢–µ–∫—É—â–∏–µ –∑–∞–¥–∞–Ω–∏—è –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –±–∞–Ω–∫–µ")
questions = load_bank(bank_name)
if not questions:
    st.info("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π")
else:
    for q in questions:
        if q.get("type") == "mcq":
            opts = ", ".join([f"{o['key']}) {o['text']}" for o in q.get("options", [])])
            st.markdown(f"- [MCQ] {q['text']} ‚Äî {opts} (–≤–µ—Ä–Ω—ã–π: {q.get('correct_key')})")
        else:
            st.markdown(f"- {q.get('text', '')}")
